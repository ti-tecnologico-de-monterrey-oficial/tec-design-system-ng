@use "fonts" as fonts;
@use "rem" as rem;

// Media query
@mixin media-query($breakpoint, $condition) {
  $breakpoint-value: if(
    type-of($breakpoint) == number,
    $breakpoint,
    str-slice($breakpoint, 1, -2)
  );
  @media (#{$condition}-width: #{$breakpoint-value}px) {
    @content;
  }
}

@mixin container-query($breakpoint, $condition) {
  /*
  Add this property to parent style:
    container-type: inline-size;
  */
  @container (#{$condition}-width: #{$breakpoint}px) {
    @content;
  }
}

// Reset Element
@mixin resetElement() {
  box-sizing: border-box;
  line-height: 1.5;

  &:focus {
    @include focusElement();
  }
}

// Focus for button and input
@mixin focusElement($inset: outset) {
  outline: 0;
}

// Button styles
@mixin button($appearance: primary) {
  @include fonts.font(5, regular);
  align-items: center;
  border: none;
  border-radius: var(--bmb-radius-s);
  display: inline-flex;
  height: rem.rem_calc(36);
  justify-content: center;
  padding: var(--bmb-spacing-none) var(--bmb-spacing-m);
  gap: var(--bmb-spacing-xs);
  box-sizing: border-box;

  bmb-icon {
    font-size: rem.rem_calc(16);
    height: rem.rem_calc(20);
  }

  &[size="micro"] {
    padding: var(--bmb-spacing-s) rem.rem_calc(15);
  }

  &[size="large"] {
    height: rem.rem_calc(48);
    width: 100%;
  }

  &[case="true"] {
    align-items: center;
    display: grid;
    grid-template-columns: auto 1fr;
    padding-bottom: 0;
    padding-top: 0;

    &[position="right"],
    &[ng-reflect-position="right"] {
      grid-template-columns: 1fr auto;
    }
  }

  @include media-query(768, "min") {
    padding: rem.rem_calc(8 40);
  }

  &:focus,
  &:focus:hover {
    @include focusElement();
  }

  &:disabled {
    cursor: not-allowed;
  }

  @if $appearance == primary {
    background-color: RGBA(var(--color-mariner-700));
    color: RGBA(var(--color-white-primary));

    bmb-icon {
      color: RGBA(var(--color-white-primary));
    }

    &:hover:not(:disabled),
    &:focus-visible:not(:disabled) {
      background-color: RGBA(var(--color-mariner-800));
    }

    &:active:not(:disabled),
    &.bmb_btn-toggle-active {
      background-color: RGBA(var(--color-mariner-500));
    }

    &:disabled {
      opacity: 0.5;
    }
  } @else if $appearance == secondary-filled {
    background-color: RGBA(var(--color-charade-50));
    color: RGBA(var(--color-charade-900));

    bmb-icon {
      color: RGBA(var(--color-charade-900));
    }

    &:hover:not(:disabled),
    &:focus-visible:not(:disabled) {
      background-color: RGBA(var(--color-charade-100));
    }

    &:active:not(:disabled),
    &.bmb_btn-toggle-active {
      background-color: RGBA(var(--color-charade-500));
      color: RGBA(var(--color-charade-50));

      bmb-icon {
        color: RGBA(var(--color-charade-50));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  } @else if $appearance == secondary-outlined {
    background-color: transparent;
    border: rem.rem_calc(1) solid RGBA(var(--color-black-primary));
    color: RGBA(var(--color-black-primary));

    bmb-icon {
      color: RGBA(var(--color-black-primary));
    }

    &:hover:not(:disabled),
    &:focus-visible:not(:disabled) {
      border-width: rem.rem_calc(2);
    }

    &:active:not(:disabled),
    &.bmb_btn-toggle-active {
      background-color: RGBA(var(--color-black-primary));
      color: RGBA(var(--color-white-primary));

      bmb-icon {
        color: RGBA(var(--color-white-primary));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  } @else if $appearance == destructive {
    background-color: transparent;
    border: rem.rem_calc(1) solid RGBA(var(--color-red-primary));
    color: RGBA(var(--color-red-primary));

    bmb-icon {
      color: RGBA(var(--color-red-primary));
    }

    &:hover:not(:disabled),
    &:focus-visible:not(:disabled) {
      border-width: rem.rem_calc(2);
    }

    &:active:not(:disabled),
    &.bmb_btn-toggle-active {
      background-color: RGBA(var(--color-red-primary));
      color: RGBA(var(--color-white-primary));

      bmb-icon {
        color: RGBA(var(--color-white-primary));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  }
}

@mixin fabInput($size: small, $type: normal) {
  font-family: fonts.$font-poppins-regular;
  display: inline-flex;
  font-size: rem.rem_calc(14);
  align-items: center;
  justify-content: center;
  outline: none;
  border: 0;
  margin: rem.rem_calc(3);
  padding: var(--bmb-spacing-s) var(--bmb-spacing-m);
  position: fixed;
  bottom: rem.rem_calc(10);
  right: rem.rem_calc(10);
  box-shadow: rem.rem_calc(2 2 2 1) RGBA(var(--color-black-primary), 0.25);
  background-color: RGBA(var(--color-blue-primary));
  color: RGBA(var(--color-white-primary));
  z-index: 2;

  &:hover {
    background-color: RGBA(var(--color-mariner-800));
  }

  &:active {
    background-color: RGBA(var(--color-white-primary));
    border: rem.rem_calc(1) solid RGBA(var(--color-blue-primary));

    > span {
      color: RGBA(var(--color-blue-primary));
    }

    > bmb-icon {
      color: RGBA(var(--color-blue-primary));
    }
  }

  > bmb-icon {
    font-size: rem.rem_calc(24);
  }

  @if $size == small and $type == normal {
    width: rem.rem_calc(40);
    height: rem.rem_calc(40);
    border-radius: rem.rem_calc(50);
  } @else if $size == small and $type == extended {
    width: fit-content;
    height: rem.rem_calc(40);
    border-radius: rem.rem_calc(50);
    > span {
      padding-right: rem.rem_calc(8);
      font-size: rem.rem_calc(14);
    }
  } @else if $size == large and $type == normal {
    width: rem.rem_calc(60);
    height: rem.rem_calc(60);
    border-radius: rem.rem_calc(50);
  } @else if $size == large and $type == extended {
    height: rem.rem_calc(60);
    width: fit-content;
    border-radius: rem.rem_calc(50);
    > span {
      padding-right: rem.rem_calc(8);
      font-size: rem.rem_calc(14);
    }
  }
}

@mixin materialIcons() {
  color: inherit;
  direction: ltr;
  display: inline-block;
  font-family: "Material Icons";
  font-feature-settings: "liga";
  font-size: inherit;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-style: normal;
  font-weight: normal;
  letter-spacing: normal;
  line-height: normal;
  text-rendering: optimizeLegibility;
  text-transform: none;
  white-space: nowrap;
  width: fit-content;
  word-wrap: normal;
}

@mixin materialSymbols() {
  color: inherit;
  direction: ltr;
  display: inline-block;
  font-family: "Material Symbols Rounded";
  font-feature-settings: "liga";
  -webkit-font-feature-settings: "liga";
  font-size: inherit;
  -webkit-font-smoothing: antialiased;
  font-style: normal;
  font-weight: normal;
  letter-spacing: normal;
  line-height: normal;
  text-transform: none;
  white-space: nowrap;
  width: fit-content;
  word-wrap: normal;
  font-variation-settings:
    "FILL" 1,
    "wght" 400,
    "GRAD" 0,
    "opsz" 24;
}

@mixin bgAppearance($appearance: normal) {
  $color: black;
  @if $appearance == normal {
    $color: RGBA(var(--color-charade-950));
  } @else if $appearance == strong {
    $color: RGBA(var(--color-mariner-500));
  } @else if $appearance == success {
    $color: RGBA(var(--color-green-primary));
  } @else if $appearance == info {
    $color: RGBA(var(--color-purple-primary));
  } @else if $appearance == warning {
    $color: RGBA(var(--color-yellow-light));
  } @else if $appearance == error {
    $color: RGBA(var(--color-red-primary));
  } @else if $appearance == brand {
    $color: RGBA(var(--color-neon-primary));
  } @else if $appearance == background {
    $color: RGBA(var(--color-charade-100));
  } @else if $appearance == mitec_blue {
    $color: RGBA(var(--color-mitec-blue));
  } @else if $appearance == mitec_red {
    $color: RGBA(var(--color-mitec-red));
  } @else if $appearance == mitec_green {
    $color: RGBA(var(--color-mitec-green));
  } @else if $appearance == mitec_orange {
    $color: RGBA(var(--color-mitec-orange));
  } @else if $appearance == mitec_light_green {
    $color: RGBA(var(--color-green-light));
  } @else if $appearance == mitec_purple {
    $color: RGBA(var(--color-purple-light));
  }

  .bmb_badge-bullet {
    background-color: $color;
  }
}
